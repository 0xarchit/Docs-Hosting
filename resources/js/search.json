[[{"l":"Welcome"},{"i":"hello-there","l":"\uD83D\uDC4B Hello There!","p":["This website hosts the public documentation for my various projects and technical work. I've created this space to share knowledge, specifications, and insights from my development journey."]},{"l":"About the Author","p":["I'm Archit Jain (0xArchit), a programmer and student in India. I'm passionate about:","MERN Stack Development","Python and AI Implementation","Cyber Security & Ethical Hacking","Open-Source Development","As a self-taught programmer, I've learned most things through reverse engineering and online resources. When not coding, I enjoy gaming, reading tech news, and following business and crypto markets.","Feel free to connect with me:","GitHub: 0xarchit","LinkedIn: 0xarchit","Twitter: 0xarchit","Email: mail@0xarchit.is-a.dev"]},{"i":"what-youll-find-here","l":"What You'll Find Here","p":["Project Documentation: Detailed guides for projects I'm working on","Technical Specifications: Architecture diagrams, API references, and implementation details","Tutorials: Step-by-step guides for using my tools and applications","Research Findings: Results and insights from my technical explorations"]},{"l":"Navigation","p":["Use the sidebar to browse through different project categories. Each section contains comprehensive documentation to help you understand the purpose, implementation, and usage of my projects."]},{"l":"Updates","p":["I regularly update this documentation as my projects evolve. Bookmark this site to stay updated with the latest information.","Thanks for visiting my documentation hub!"]}],[{"l":"Fake News Detector"},{"l":"Overview","p":["The Fake News Detector is a web application that leverages AI to verify the authenticity of news articles. It provides users with a trust score, analysis, potential biases, and recommendations based on the submitted news content or URL."]},{"l":"Architecture","p":["The project follows a modern frontend-centric architecture:","Frontend: React application built with TypeScript and served as a Progressive Web App (PWA)","API Integration: Connects to a Gemini-powered API service for news verification"]},{"l":"Complete Workflow Diagram","p":["The following diagram illustrates the complete flow of a news verification request from user input to displaying results:"]},{"l":"Frontend Implementation","p":["The frontend is a Progressive Web Application (PWA) built with React, TypeScript, and Tailwind CSS. It provides a responsive interface for users to interact with the news verification system."]},{"l":"Key Components"},{"l":"Main Pages","p":["Landing Page: Marketing-focused page introducing the application with animated sections","Tool Page: The functional page where users can submit news for verification"]},{"l":"Features","p":["Progressive Web App: Can be installed on mobile and desktop devices","Responsive Design: Works across all screen sizes","Caching System: Stores previous verification results to minimize duplicate API calls","Modern UI: Animated components using Framer Motion","Input Flexibility: Accepts both text input and URLs for news verification","Category-Based Analysis: Customizes verification based on news category"]},{"l":"Component Breakdown"},{"l":"NewsVerifierTool","p":["This is the main functional component that allows users to verify news. It manages:","Form state for news input","API communication","Results display","Error handling","Loading states","Cache management for previously verified content"]},{"l":"NewsForm","p":["Handles user input for:","Text or URL input toggle","News content submission","Category selection","Form validation"]},{"l":"Results","p":["Displays verification results including:","Trust score with color coding","Detailed analysis","Source verification with clickable links","Potential biases","Recommendations"]},{"l":"Navigation","p":["Responsive navigation component that:","Adapts to scroll position","Shows different styling based on current route","Collapses to a mobile menu on smaller screens"]},{"l":"AddToHomeScreen","p":["PWA installation component with:","Button variant for landing page","Modal variant for prompting installation","Handles installation events and user responses"]},{"l":"Backend Endpoints and Working"},{"i":"nodejs-gemini-api-server","l":"Node.js Gemini API Server","p":["POST /api/verify-news Accepts:","Returns:","Forwards the request to the FastAPI backend to fetch recent news context.","Uses Gemini AI to analyze the user input against the fetched news context and category.","Returns a JSON object with fields: trustScore, analysis, sourceandrelated, potentialBiases, recommendation.","GET /api/health Returns health and environment status of the Node.js server."]},{"i":"how-it-works","l":"How it works:","p":["Receives user news and category.","Calls FastAPI backend to get recent news context.","Constructs a prompt for Gemini AI including user input and context.","Parses Gemini's JSON response and returns it to the frontend."]},{"l":"FastAPI News Context Backend","p":["POST /api/analyze Accepts:","Returns:","Searches DuckDuckGo for recent news links related to the input and category.","Fetches and parses up to 4 news articles for headline, description, source link, and date.","Returns a list of news context objects.","GET /health Returns a simple health check JSON.","GET /docs Auto-generated interactive API documentation (Swagger UI) provided by FastAPI. Allows you to explore and test all available endpoints directly from the browser."]},{"i":"how-it-works-1","l":"How it works:","p":["Receives news text and category.","Performs a DuckDuckGo search for relevant news.","Fetches and parses metadata from top results.","Returns structured news context for use by the Gemini server.","Integration Flow:","The frontend calls the Node.js /api/verify-news endpoint.","Node.js server fetches news context from FastAPI /api/analyze.","Node.js server uses Gemini AI to verify and analyze the news.","The result is returned to the frontend for display."]},{"l":"Implementation Details"},{"l":"Caching Implementation"},{"l":"API Integration"},{"l":"Response Schema"},{"l":"Tech Stack"},{"l":"Frontend","p":["React: UI library for building component-based interfaces","TypeScript: For type safety and improved developer experience","Tailwind CSS: For utility-first styling","Framer Motion: For sophisticated animations and transitions","React Router: For client-side routing","Vite: Fast build tool and development server","PWA: Service workers and manifest for installable web app functionality"]},{"i":"tools--infrastructure","l":"Tools & Infrastructure","p":["ESLint: Code quality and consistency","PostCSS: CSS processing with plugins","Cloudflare Pages/Vercel: Potential deployment platforms"]},{"l":"PWA Implementation","p":["The project is configured as a Progressive Web App using the vite-plugin-pwa plugin:"]},{"l":"Installation and Local Development"},{"l":"Prerequisites","p":["Node.js 16+","npm or yarn"]},{"l":"Setup"},{"l":"Environment Variables"},{"l":"Required Variables"},{"l":"Usage Guide"},{"l":"Basic Usage","p":["Visit the Website: Go to the deployed application","Select Input Type: Choose between text input or URL","Enter News Content: Paste the news article or URL","Select Category: Choose the relevant news category from education, politics, finance, etc.","Submit: Click \"Verify News\"","Review Results: Examine the trust score, analysis, and recommendations"]},{"l":"Installing as PWA","p":["Visit the website in a compatible browser (Chrome, Edge, Safari, etc.)","Look for the \"Install App\" button or the installation prompt","Add the app to your home screen","Access the app directly from your device's home screen or app drawer"]},{"l":"Project Structure"},{"l":"Development Guidelines"},{"l":"Code Style","p":["Use TypeScript for type safety","Follow functional React patterns with hooks","Implement responsive design for all screen sizes","Use semantic HTML elements for better accessibility","Follow the project's ESLint configuration"]},{"i":"project-structure-1","l":"Project Structure","p":["Keep components focused on a single responsibility","Use custom hooks for shared logic","Implement proper error handling throughout the application","Document complex logic with comments","Use consistent naming conventions"]},{"l":"Performance Optimizations","p":["PWA Caching: Critical assets are cached for offline use","Client-side Caching: Previous verification results are stored to minimize API calls","Lazy Loading: Components and routes could be lazy-loaded for faster initial load","Animations: Optimized with hardware acceleration where possible","Build Optimization: Production builds are optimized for size and performance"]},{"l":"Security Considerations","p":["API keys are stored securely in environment variables","Input validation on user-submitted content","HTTPS is required for PWA functionality","Cross-site request security headers"]},{"l":"Future Enhancements","p":["User Accounts: Allow users to save verification history and preferences","Browser Extensions: Create browser extensions for verifying news directly on news websites","Multiple Languages: Support verification in different languages","Explanation Features: Add more detailed explanations of verification methods","Historical Context: Provide historical context for news topics to improve verification accuracy","Citation Verification: Verify citations and references within news articles"]},{"l":"Troubleshooting"},{"l":"Common Issues","p":["API Connection Errors: Check your internet connection and API endpoint configuration","Installation Issues: Make sure your browser supports PWA installation and you're using HTTPS","Rendering Problems: Clear browser cache if you encounter UI display issues","Form Submission Errors: Ensure all required fields are completed before submission"]},{"l":"Contact","p":["For questions or assistance, please contact:","GitHub: 0xarchit"]},{"l":"License","p":["This project is licensed under the MIT License - see the LICENSE file for details."]}]]