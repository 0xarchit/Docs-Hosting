[[{"l":"Welcome to 0xArchit Documentation","p":["Build Status","This documentation site is built with Retype and features full-text search, dark/light modes, and collaborative editing."]},{"l":"\uD83D\uDC4B Hello There!","p":["This website hosts comprehensive documentation for my projects and technical work.","I've created this space to share knowledge, specifications, and insights from my development journey."]},{"l":"Featured Projects","p":["Fake News Detector is a React/TypeScript PWA that integrates a Gemini‑powered API and FastAPI backend to verify news authenticity, provide trust scores, and analyze biases.","LearnTrack is a React/TypeScript and FastAPI–based learning management system offering role‑based access, course and assignment management, file uploads, real‑time notifications, and analytics.","Scroll2PDF is a PyQt6 desktop application that automatically scrolls through a webpage, captures and stitches screenshots, and exports them as a multi-page PDF.","CodeArc is a programming-centric AI chatbot companion for web and mobile with local history storage, custom API key support, and Gemini‑powered intelligence."]},{"l":"About Me","p":["I'm Archit Jain (0xArchit), a programmer and student in India passionate about building innovative solutions."]},{"l":"Skills & Interests","p":["MERN Stack Development","Python and AI Implementation","Cyber Security & Ethical Hacking","Open-Source Development","As a self-taught programmer, I've learned most things through reverse engineering and online resources.","When not coding, I enjoy gaming, reading tech news, and following business and crypto markets."]},{"l":"Connect With Me","p":["GitHub: 0xarchit","LinkedIn: 0xarchit","Twitter: 0xarchit","Email: mail@0xarchit.is-a.dev"]},{"l":"What You'll Find Here","p":["Project Documentation: Detailed guides for projects I'm working on","Technical Specifications: Architecture diagrams, API references, and implementation details","Tutorials: Step-by-step guides for using my tools and applications","Research Findings: Results and insights from my technical explorations"]},{"l":"Navigation","p":["Use the sidebar to browse through different project categories.","Each section contains comprehensive documentation to help you understand the purpose, implementation, and usage of my projects."]},{"l":"Stay Updated","p":["I regularly update this documentation as my projects evolve.","Bookmark this site to stay updated with the latest information.","Thanks for visiting my documentation hub!"]}],[{"i":"#","p":["Comprehensive overview of the AI-powered Fake News Detector project architecture, components, and implementation details."]},{"l":"Fake News Detector","p":["GitHub: 0xarchit/news-verification-system","Explore how this AI-powered application is structured, built, and deployed to help combat misinformation."]},{"l":"Overview","p":["The Fake News Detector is a progressive web application that leverages AI to verify the authenticity of news articles. It provides users with a trust score, detailed analysis, potential biases, and recommendations based on the submitted news content or URL.","Trust Score Analysis with detailed explanations","Supports both Text Input and URL Submission","Category-specific verification algorithms","Progressive Web App for cross-platform use","Client-side caching of previous verifications","Landing Page","Main Interface","App Install PopUp"]},{"l":"Architecture","p":["The project follows a modern frontend-centric architecture with AI-powered backend services:","Technology Stack Overview:","Frontend: React application built with TypeScript and served as a Progressive Web App (PWA)","API Integration: Connects to a Gemini-powered API service for news verification"]},{"l":"System Diagram"},{"l":"Complete Workflow Diagram","p":["The following diagram illustrates the complete flow of a news verification request from user input to displaying results:"]},{"l":"Frontend Implementation","p":["The frontend is a Progressive Web Application (PWA) built with React, TypeScript, and Tailwind CSS. It provides a responsive interface for users to interact with the news verification system."]},{"l":"Key Components"},{"l":"Main Pages","p":["Marketing-focused page introducing the application with animated sections.","The functional page where users can submit news for verification."]},{"l":"Features","p":["Progressive Web App: Install on any device","Responsive Design: Works across all screen sizes","Smart Caching: Stores previous verification results","Modern UI: Animated components using Framer Motion","Efficient API Integration: Optimized data transfer"]},{"l":"Component Breakdown"},{"l":"Components","p":["NewsVerifierTool: Manages form state, API calls, results display, errors, loading states, and caching","NewsForm: Handles input toggle (text/URL), news submission, and validation","Results: Displays trust score, analysis, source links, biases, and recommendations","Navigation: Responsive nav bar with mobile collapse behavior","AddToHomeScreen: PWA install button and modal with event handling"]},{"l":"Backend & API Endpoints","p":["The application uses two backend services with complementary roles:"]},{"l":"Node.js Gemini API Server","p":["Endpoint","Method","Description","/api/verify-news","POST","Main endpoint for news verification","/api/health","GET","Server health check"]},{"l":"Example API Request"},{"l":"Example API Response"},{"l":"FastAPI News Context Backend","p":["/api/analyze","/docs","/health","API documentation (Swagger UI)","Description","Endpoint","GET","Method","Node.js server fetches news context from FastAPI /api/analyze","Node.js server uses Gemini AI to verify and analyze the news","POST","Provides news context for AI verification","Server health check","The frontend calls the Node.js /api/verify-news endpoint","The result is returned to the frontend for display","Uptime Monitoring: 1. Backend Uptime Checker 2. Backup Backend Uptime Checker"]},{"l":"Implementation Details"},{"l":"Caching Implementation"},{"l":"Gemini Processing","p":["Gemini AI orchestrates the core verification pipeline by:","Fetching recent news context from the FastAPI endpoint (/api/analyze), which returns parsed headlines, descriptions, sources, and dates.","Translating user‑submitted news into English (if needed).","Computing text similarity using algorithms such as:","TF‑IDF (Term Frequency-Inverse Document Frequency) + Cosine Similarity: We vectorize both the user input and each context document to spot overlapping terms and measure relevance.","Semantic Embeddings: Leveraging pre‑trained language models to capture deeper contextual meaning beyond exact term matches.","Keyword & Entity Matching: Identifying shared entities (names, dates, locations) between the input and context.","Aggregating these scores to derive a final trustScore(0–100).","Generating a concise analysis, listing matched sources in sourceandrelated, detecting biases, and crafting a recommendation."]},{"l":"API Integration"},{"l":"Response Schema"},{"l":"Tech Stack"},{"l":"Frontend","p":["React: UI library for building component-based interfaces","TypeScript: For type safety and improved developer experience","Tailwind CSS: For utility-first styling","Framer Motion: For sophisticated animations and transitions","React Router: For client-side routing","Vite: Fast build tool and development server","PWA: Service workers and manifest for installable web app functionality"]},{"l":"Tools & Infrastructure","p":["ESLint: Code quality and consistency","PostCSS: CSS processing with plugins","Cloudflare Pages/Vercel: Potential deployment platforms"]},{"l":"Backend","p":["Node.js & Express: Main Gemini API server ( Gemini API Server)","@google/generative-ai: Gemini AI integration on Node.js","Python & FastAPI: News-context backend ( FastAPI News Context Server)","pydantic: Request validation in FastAPI","aiohttp & BeautifulSoup4: Fetch and parse news data","uvicorn: ASGI server for FastAPI"]},{"l":"PWA Implementation","p":["The project is configured as a Progressive Web App using the vite-plugin-pwa plugin:"]},{"l":"Installation and Local Development"},{"l":"Project Setup"},{"l":"Environment Variables"},{"l":"Usage Guide"},{"l":"Basic Usage","p":["Visit the Website: Go to the deployed application","Select Input Type: Choose between text input or URL","Enter News Content: Paste the news article or URL","Select Category: Choose the relevant news category from education, politics, finance, etc.","Submit: Click \"Verify News\"","Review Results: Examine the trust score, analysis, and recommendations"]},{"l":"Installing as PWA","p":["Visit the website in a compatible browser (Chrome, Edge, Safari, etc.)","Look for the \"Install App\" button or the installation prompt","Add the app to your home screen","Access the app directly from your device's home screen or app drawer"]},{"l":"Project Structure"},{"l":"Development Guidelines"},{"l":"Code Style","p":["Use TypeScript for type safety","Follow functional React patterns with hooks","Implement responsive design for all screen sizes","Use semantic HTML elements for better accessibility","Follow the project's ESLint configuration"]},{"i":"project-structure-1","l":"Project Structure","p":["Keep components focused on a single responsibility","Use custom hooks for shared logic","Implement proper error handling throughout the application","Document complex logic with comments","Use consistent naming conventions"]},{"l":"Performance Optimizations","p":["PWA Caching: Critical assets are cached for offline use Client-side Caching: Previous verification results are stored to minimize API calls Lazy Loading: Components and routes could be lazy-loaded for faster initial load Animations: Optimized with hardware acceleration where possible Build Optimization: Production builds are optimized for size and performance"]},{"l":"Future Enhancements","p":["User Accounts – Allow users to save verification history and preferences","Browser Extensions – Create browser extensions for verifying news directly on news websites","Multiple Languages – Support verification in different languages","Explanation Features – Add more detailed explanations of verification methods","Historical Context – Provide historical context for news topics to improve verification accuracy","Citation Verification – Verify citations and references within news articles","Machine Learning Model – Implement a custom machine learning model instead of Gemini that trains automatically on search data via this website"]},{"l":"Troubleshooting"},{"l":"Common Issues","p":["API Connection Errors: Check internet connection and API endpoint configuration","Installation Issues: Ensure HTTPS and PWA support in your browser","Rendering Problems: Clear browser cache to resolve UI issues","Form Submission Errors: Make sure all required form fields are completed"]},{"l":"Contact & Support","p":["For questions or assistance, please contact:","GitHub Email"]}],[{"i":"#","p":["Complete documentation for the LearnTrack learning management system with role-based access, course management, and analytics."]},{"l":"LearnTrack","p":["GitHub: 0xarchit/LearnTrack","LearnTrack is a comprehensive learning management system designed for educational institutions with role-based access for students, faculty, and administrators. As this project was built using SQLite with basic encryption for a short-duration college project, it has some security vulnerabilities. I plan to improve the security features in future updates."]},{"l":"Live Demo","p":["Frontend: https://learntrack.pages.dev- deployed on Cloudflare Pages","Backend: deployed using Docker on Render"]},{"l":"Screenshots","p":["Landing Page","Student Panel Faculty Panel Admin Panel","Backend (FastAPI Swagger UI)"]},{"l":"Problem Statement","p":["Learn Track streamlines course access, submission tracking, and academic progress for students and faculty. It supports resource uploading, grading, feedback, and certificate downloads. Personalized dashboards give real-time academic analytics. The system supports semester-based enrollment, auto-notifications, and bulk result uploads."]},{"l":"User Responsibilities","p":["Student","Faculty","Admin","Enroll in courses and view syllabus","Upload lecture content","Approve new course creation","Submit assignments and check grades","Grade submissions and provide remarks","Manage user permissions","Access study material and feedback","Track student performance","Generate result analysis and performance reports"]},{"l":"Allowed Tools","p":["Frontend: React, framer-motion, Tailwind CSS, etc.","Backend: Python (FastAPI) with SQLite3"]},{"l":"Overview","p":["LearnTrack is a comprehensive learning management system that streamlines course access, submission tracking, and academic progress for students and faculty. It provides a robust platform with personalized dashboards offering real-time analytics and supports semester-based enrollment, auto-notifications, and bulk result uploads."]},{"l":"Features","p":["Role-based Access- Student, faculty, and admin portals","Course Management- CRUD operations and enrollment tracking","Assignment System- Creation, submission, and grading workflow","File Management- Materials and submissions handling","Real-time Notifications- Role-targeted messaging system","Analytics- Performance metrics and progress tracking","Reporting- Customized reports for different stakeholders","Scheduling- Course timeline and assignment due dates","Theming- Dark/light theme support","Responsive Design- Mobile-friendly interface","Accessibility- WCAG-compliant components"]},{"l":"Tech Stack","p":["Frontend","Backend","Authentication","React - UI library for building component-based interfaces","FastAPI - Modern, high-performance Python web framework","Role-based Access Control - Permission management","TypeScript - For type safety and improved developer experience","SQLite - Lightweight relational database","Bcrypt - Password hashing","Framer Motion - For sophisticated animations and transitions","Pydantic - Data validation and settings management","Tailwind CSS - For utility-first styling","Uvicorn - ASGI server implementation","React Router - For client-side routing"]},{"l":"Folder Structure"},{"l":"Getting Started"},{"l":"Prerequisites","p":["Node.js >= 18","pnpm or npm","Python 3.9+","pip"]},{"l":"Installation"},{"l":"Prebuilt Docker Image (Optional)","p":["For quick setup, you can use our pre-built Docker image"]},{"l":"Running the Application","p":["Open http://localhost:5173 in your browser."]},{"l":"Demo Logins","p":["For testing purposes, you can use the following demo accounts:","Role","Email","Password","Student","student@0xarchit.is-a.dev","12345678","Faculty","faculty@0xarchit.is-a.dev","Admin","admin@0xarchit.is-a.dev"]},{"l":"Frontend"},{"l":"Frameworks & Libraries","p":["React & TypeScript- Core UI framework with type safety","React Router v6- For client-side routing and navigation","Framer Motion- For sophisticated animations and transitions","Tailwind CSS- For utility-first styling approach","Context API- For state management (Auth, Theme, Notifications)"]},{"l":"Routing & Layouts"},{"l":"Contexts","p":["User State- Current user object with profile data","Role Management- Student, faculty, or admin role handling","Dark/Light Mode- Theme preference management","Color Schemes- Primary and accent color customization","Local Storage- Persistent theme preferences","Toast Notifications- For system messages","Real-time Updates- WebSocket connection (future)","Notification Center- Centralized notification management"]},{"l":"Pages & Components","p":["Admin Pages","AssignmentCreation - Create & grade assignments","Assignments - Viewing & submission","Core Pages","CourseApproval - Review & approve courses","CourseCreation - Create & manage course content","Courses - Course listing & enrollment","Dashboard - Role-specific metrics","Faculty Pages","Grades - Performance tracking & feedback","LandingPage - Marketing page","Login/Register/ForgotPassword - Authentication","Materials - Study resources & downloads","MaterialUpload - Upload & organize resources","Profile - User information & preferences","ReportGeneration - Analytics & performance reports","StudentProgress - Track student performance","UserManagement - Create, edit, deactivate users"]},{"l":"Backend"},{"l":"Framework & Setup","p":["FastAPI- High-performance Python web framework","CORS Middleware- For secure cross-origin requests","StaticFiles- For serving uploaded files","SQLite Helper- For database connection and migrations"]},{"l":"API Endpoints","p":["/api/assignments","/api/assignments/{id}/submissions","/api/courses","/api/courses/{id}","/api/enroll","/api/enrollments","/api/grades","/api/login","/api/materials","/api/register","/api/reports/performance","/api/submissions/{id}/grade","Access course materials","Access interactive API documentation at http://localhost:5000/docs after starting the backend","Authenticate and get token","Create new assignment","Create new course","Create new user account","DELETE","Description","Endpoint","Enroll in a course","Generate performance reports","GET","Get course details","Grade submission","List all available courses","List course assignments","List user enrollments","Method","POST","PUT","Remove course","Submit assignment work","Unenroll from course","Update course details","View student grades"]},{"l":"Database"},{"l":"Schema","p":["assignments","courses","enrollments","grades","id, message, type, target_role, created_at","id, name, email, password, role, department, joinDate","id, title, course_id, description, due_date","id, title, course_id, type, url","id, title, instructor_id, description, status","id, user_id, assignment_id, file_url, grade","id, user_id, course_id, grade","Key Columns","materials","notifications","submissions","Table","user_id, course_id","users"]},{"l":"ER Diagram"},{"l":"Migrations","p":["On startup, init_db() adds missing columns and migrates data."]},{"l":"Workflows"},{"l":"Authentication Flow"},{"l":"Course Management Flow"},{"l":"Assignment Submission & Grading Flow"},{"l":"Notification Flow"},{"l":"Diagrams"},{"l":"System Overview"},{"l":"Frontend Routing"},{"l":"Backend API Flow"},{"l":"Environment Variables"},{"l":"Advanced Usage"},{"l":"API Integration Example"},{"l":"Custom Workflow Integration","p":["LearnTrack can be extended with custom workflows by implementing additional API endpoints and frontend components. Example use cases include:","Calendar integration for scheduling","Discussion forums for each course","Video conferencing for virtual classrooms","Advanced analytics dashboards"]},{"l":"Troubleshooting","p":["Connection Errors: Verify SQLite database file exists and is not corrupted","Foreign Key Constraints: Ensure related records exist before creating dependent records","Size Limitations: Default upload limit is 5MB","Supported Formats: Check allowed file extensions (.pdf, .doc, .jpg, etc.)","Clear Cache: Browser caching may cause stale UI state","Check Network: Verify backend connectivity"]},{"l":"Contact & Support","p":["For questions, assistance, or contributions, please reach out:","GitHub Email LinkedIn"]}],[{"i":"#","p":["Auto-Scrolling Webpage Capture to PDF with PyQt6"]},{"l":"Auto-Scrolling Webpage Capture to PDF","p":["Python PyQt6 PDF","GitHub: 0xarchit/Scroll-To-Pdf","A desktop application built with PyQt6 that automatically scrolls through a webpage, captures screenshots, stitches them, and exports the result as a multi-page PDF."]},{"l":"Screenshots","p":["Software Interface"]},{"l":"Overview","p":["When you need a PDF of an entire webpage (including content below the fold), manual scrolling and screenshotting is tedious. AutoScrollCapturePDF automates:","Scrolling through the page","Taking successive screenshots","Detecting end of page via image similarity","Concatenating and saving as PDF","Ideal for long articles, reports, dashboards, and documentation pages."]},{"l":"Features","p":["Configurable scroll delay, height, and max scroll count","Automatic end-of-page detection (image similarity threshold)","Preview stitched result before export","Primary and fallback PDF export methods (Pillow and img2pdf)","Dark-themed, responsive PyQt6 GUI","Cross-platform (Windows/macOS/Linux)"]},{"l":"Installation","p":["Clone this repository:","(Optional) Create a virtual environment:","Install dependencies:","Ensure app_icon.ico sits alongside main.py in the project root."]},{"l":"Usage"},{"l":"Launching the Application","p":["The main window appears. Adjust settings then click Start Capture."]},{"l":"Settings Panel","p":["Setting","Description","Delay between scrolls","Seconds to wait after each scroll (0.1 - 5.0)","Max scrolls (0 = unlimited)","Maximum number of scroll actions before stopping","Scroll height (0 = auto)","Vertical pixels per scroll (0 uses default heights)","Fullscreen mode (F11)","Toggle auto height for full-screen vs windowed browsing"]},{"l":"Capture Workflow","p":["Click Start Capture→ 3‑second countdown → window minimizes","Focus browser and let it scroll+capture automatically","Status bar displays live updates and screenshot count","Capture stops on page end or reaching max scrolls","Window restores with Preview, Save, and Clear options"]},{"l":"Previewing","p":["Click Preview Screenshots to open a stitched image of all screenshots. Close preview to return."]},{"l":"Exporting to PDF","p":["Click Save as PDF","Choose destination file path (.pdf)","Application attempts Pillow export; on failure, uses img2pdf fallback"]},{"l":"Architecture","p":["main.py: GUI, settings, thread orchestration","CaptureThread: Runs scrolling & screenshot logic on background thread","Image Similarity: Grayscale thumbnails compared to detect end of page","PDF Export: Multi-page via Pillow or img2pdf fallback"]},{"l":"How It Works","p":["Initial Delay: 3 seconds to switch focus to browser","Scroll Loop:","Grab full-screen screenshot","Compare with previous (100×100 grayscale threshold)","If similar beyond 95%, capture final part and exit","Else, scroll down by configured height and repeat","Signal UI: screenshot_taken, status_update, capture_complete signals update progress"]},{"l":"Configuration Parameters","p":["0","0.5","10","boolean","counts","Default","delay","Description","False","is_fullscreen","manual_height","max_scrolls","Override auto scroll height if > 0","Parameter","pixels","seconds","Unit","Use fullscreen height (1300px) vs windowed (1245px)","Wait time between scroll & capture","Zero = infinite until end-of-page detected"]},{"l":"Packaging as Executable","p":["This project includes a PyInstaller spec ( main.spec):","Look under dist/ or build/ for the generated executable."]},{"l":"Troubleshooting","p":["Blank screenshots: Ensure browser window is not minimized and is in focus.","OCR or hidden UI elements: Use headless capture libraries or adjust scroll offsets.","Permission errors: On macOS, grant screen recording privileges.","PDF Export fails: Install img2pdf via pip install img2pdf."]},{"l":"FAQ","p":["Q: Can I capture only part of a page?","A: Not currently; feature coming soon (scroll region selection).","Q: Why are some screenshots repeated?","A: Overlapping scroll height may cause repeats. Increase delay or adjust scroll height.","Q: How do I change similarity threshold?","A: Hardcoded to 0.95; modify images_are_similar() in CaptureThread."]},{"l":"Contributing","p":["Fork the repo","Create a feature branch ( git checkout -b feature/YourFeature)","Commit your changes ( git commit -m 'Add feature')","Push to your branch ( git push origin feature/YourFeature)","Open a Pull Request","Please follow PEP8 and include tests for new functionality."]}],[{"i":"#","p":["Programming‑centric AI chatbot companion for web and mobile with local storage, custom API keys, and Gemini‑powered intelligence."]},{"l":"CodeArc: Programming‑Centric AI Chatbot Companion","p":["React AI Capacitor","GitHub: 0xarchit/CodeArc"]},{"l":"Overview","p":["CodeArc is a programming-focused chatbot designed to explain concepts and help you learn, just like a knowledgeable friend. It offers an intuitive and feature-packed experience across both mobile and web platforms."]},{"l":"Get Started","p":["Download the App: CodeArc Releases","Try the Web Version: CodeArc Website"]},{"l":"Key Features","p":["Local Storage for History and Context: Access your previous chats directly on your device (browser for the web version) without relying on external servers.","Custom API Keys: Configure your own API keys for a personalized and secure experience.","Cross-Platform Compatibility: Available for both mobile apps and websites, ensuring you can code and learn on the go.","Easy Chat Management: Effortlessly delete chats whenever needed.","Powered By Gemini: CodeArc is proudly powered by Gemini 2.0 Flash, bringing cutting-edge AI to your fingertips for a smarter and friendlier chatbot experience."]},{"l":"Tech Stack","p":["CodeArc is built using cutting-edge technologies to deliver a seamless and efficient experience:","React: For crafting an interactive and responsive user interface.","TypeScript: Ensuring type safety and a smoother development process.","@google/generative-ai: Integrating advanced AI-driven features.","Capacitor: Enabling hybrid app development for cross-platform functionality.","Zustand: Simplifying state management with a lightweight and intuitive approach.","react-loading-indicators: Adding polished loading visuals for an enhanced user experience."]},{"l":"Privacy First","p":["Your chat history is stored locally on your device or browser, giving you complete control over your data.","First Screen","Chat Window"]},{"l":"Before Downloading"},{"l":"How to Get Your API Key?","p":["Visit Google AI Studio.","Sign in with your Google account.","Click on the \"Create API key\" button.","Copy your new API key.","\uD83D\uDCDD Note: Keep your API key secure and never share it publicly! This api key is upto you only we dont collect or store them"]},{"l":"Upcoming Features","p":["Download Chat as PDF: Soon, you'll be able to save your chat conversations as PDF files for easy sharing and offline access.","Update Notification Fix: Automatic update notifications in the app for a seamless user experience."]}],[{"i":"#","p":["Cloudflare Worker that acts as a transparent proxy for DuckDuckGo with custom branding, URL rewriting, and JavaScript injection capabilities."]},{"l":"ArcArcGo: DuckDuckGo Proxy with Custom Branding","p":["Cloudflare JavaScript Proxy","GitHub: 0xarchit/ArcArcGo","Live Demo: https://arcarcgo.0xarc.workers.dev","ArcArcGo is a Cloudflare Worker that acts as a transparent proxy for DuckDuckGo, implementing custom branding and URL rewriting through regex patterns and JavaScript injection."]},{"l":"Screenshot","p":["ArcArcGo Interface"]},{"l":"Overview","p":["ArcArcGo demonstrates advanced Cloudflare Workers capabilities by intercepting requests, fetching content from DuckDuckGo, and modifying responses before serving them to clients with custom branding and functionality."]},{"l":"Architecture"},{"l":"Request Flow","p":["Client Request→ Cloudflare Worker","Worker Processing→ DuckDuckGo Server","Response Modification→ Client"]},{"l":"Core Components"},{"l":"1. Event Listener","p":["The worker uses a fetch event listener to intercept all incoming HTTP requests and delegates processing to the main handleRequest function."]},{"l":"2. Request Handler (handleRequest)"},{"l":"URL Construction","p":["The worker extracts the pathname, search parameters, and hash from incoming requests and constructs the target DuckDuckGo URL while maintaining the original query structure."]},{"l":"Header Processing","p":["Header Modifications:","Removed: Host, X-Forwarded-For(prevents detection as proxy)","Set: Standard browser Accept header","Set: Default User-Agent if not present"]},{"l":"Response Processing","p":["Response Header Modifications:","Removed: Content-Security-Policy(allows script injection)","Added: CORS header for cross-origin access"]},{"l":"3. Content Type Handling"},{"l":"Non-HTML Content","p":["Images, CSS, JavaScript, and other assets are passed through unchanged, maintaining original response body and headers."]},{"l":"HTML Content Processing","p":["Uses TransformStream for real-time content modification without buffering the entire response."]},{"l":"URL Rewriting System"},{"l":"Pattern Matching","p":["The worker uses comprehensive regex patterns to identify and rewrite URLs, including:","Standard HTML attributes: href, src, action in both double and single quotes","CSS URLs: url() declarations","Meta refresh: URL redirects in meta tags","JavaScript redirects: window.location, location.href, etc.","Data attributes: Custom data URLs for navigation","Absolute paths: Standalone paths in quotes","Event handlers: onclick, onchange, onsubmit attributes"]},{"l":"URL Transformation Logic"},{"l":"1. Absolute URLs","p":["Only processes DuckDuckGo URLs by stripping the domain and prepending the proxy base URL."]},{"l":"2. Relative URLs","p":["Resolves relative URLs against the DuckDuckGo origin while maintaining query parameters."]},{"l":"3. Special Cases","p":["Fragments (#): Preserved unchanged","Data URLs: Preserved unchanged","JavaScript URLs: Preserved unchanged","Event Handlers: Special processing for location changes"]},{"l":"Branding System"},{"l":"Text Replacement","p":["Real-time text replacement in HTML content using regex patterns to replace \"DuckDuckGo\" with \"ArcArcGo\" and handle possessive forms."]},{"l":"Logo Replacement","p":["Regex-based logo replacement that identifies DuckDuckGo logo images and replaces them with the custom ArcArcGo logo."]},{"l":"JavaScript Injection","p":["Dynamic branding through injected script that:","Text Replacement: Uses TreeWalker to traverse all text nodes","Title Replacement: Updates document title","Logo Replacement: Targets specific CSS selectors for logo images","Dynamic Monitoring: Uses MutationObserver for continuously added content","Multiple Triggers: Responds to load, DOMContentLoaded events, and periodic intervals"]},{"l":"Stream Processing"},{"l":"Chunked Processing","p":["The worker processes content in chunks to optimize memory usage and provide real-time response modification. It uses a buffer system with:","Buffer Management:","Size Threshold: 8192 bytes","Content Threshold: Presence of /body tag","Final Processing: Script injection before response completion"]},{"l":"Error Handling","p":["The worker implements comprehensive error handling for:","Network connectivity issues","Invalid URL construction","Stream processing errors","Regex processing failures","All errors return a 500 status response with a descriptive error message."]},{"l":"Performance Considerations"},{"l":"Optimization Strategies","p":["Selective Processing: Only HTML content is modified","Chunked Streaming: Real-time processing without buffering entire response","Efficient Regex: Compiled patterns for fast matching","Header Optimization: Minimal header modifications"]},{"l":"Resource Usage","p":["Memory: Stream-based processing minimizes memory usage","CPU: Regex operations on text chunks","Network: Direct proxy with minimal latency"]},{"l":"Security Considerations"},{"l":"Mitigations Implemented","p":["CSP Removal: Enables script injection","Header Sanitization: Removes tracking headers","URL Validation: Prevents open proxy attacks","Content Filtering: Only processes specific content types"]},{"l":"Potential Risks","p":["Open Proxy: Limited to DuckDuckGo domain","Script Injection: Controlled injection for branding only","Privacy: No logging or data collection"]},{"l":"Deployment Guide"},{"l":"Prerequisites","p":["Cloudflare account","Workers subscription (free tier available)"]},{"l":"Deployment Steps","p":["Create Worker: In Cloudflare dashboard","Deploy Code: Copy worker.js content","Configure Routes: Set custom domain or use workers.dev subdomain","Test Functionality: Verify search and branding"]},{"l":"Configuration Options","p":["Custom Logo: Modify newLogoSrc variable","Branding Text: Adjust replacement patterns","Target Domain: Change targetHost for different proxy targets"]},{"l":"Troubleshooting"},{"l":"Common Issues"},{"l":"1. Script Injection Not Working","p":["Cause: CSP blocking or timing issues","Solution: Verify CSP removal, check MutationObserver"]},{"l":"2. URLs Not Rewriting","p":["Cause: Pattern mismatch or encoding issues","Solution: Test regex patterns, check URL encoding"]},{"l":"3. Performance Issues","p":["Cause: Large content or complex patterns","Solution: Optimize buffer size, simplify regex patterns"]},{"l":"Debug Techniques","p":["Console Logging: Add logging to worker (remove in production)","Network Inspection: Check headers and response codes","Content Validation: Verify HTML modifications"]},{"l":"Limitations"},{"l":"Technical Limitations","p":["JavaScript-Heavy Sites: May require additional pattern matching","Dynamic Content: MutationObserver helps but may miss rapid changes","Complex URLs: Some edge cases may not be covered"]},{"l":"Legal Considerations","p":["Terms of Service: May violate target site's ToS","Copyright: Logo and content modifications","Educational Use: Intended for learning purposes only","Important Notice: This is not a clone or phishing page. This is an educational project created while exploring Cloudflare Workers and can be treated as a prototype for creating similar website proxies. It will be removed if it violates any ToS or is found to be illegal.","Contact: mail@0xarchit.is-a.dev"]},{"l":"Conclusion","p":["ArcArcGo demonstrates advanced Cloudflare Workers capabilities including:","Real-time content transformation","Complex regex-based URL rewriting","Dynamic JavaScript injection","Stream processing optimization","Practical proxy server development","Performance optimization techniques","Maintaining functionality of underlying service","Educational exploration of web proxy concepts","The implementation showcases how modern edge computing can be used to create sophisticated web proxies while maintaining the performance and functionality of the underlying service."]}],[{"i":"#","p":["FastAPI service that generates beautiful code images using Carbon.now.sh with customizable styling and JPG output."]},{"l":"Carbon Code Image Generator","p":["FastAPI Docker Carbon","Github: 0xarchit/carbon-now-sh-api Live Demo: https://zeroxcarbon.onrender.com/docs","A FastAPI service that generates beautiful code images using Carbon.now.sh. Convert your code into shareable JPG images with customizable styling."]},{"l":"Features","p":["Generate high-quality code images in JPG format","Pre-configured with Seti theme and Hack font","Optimized for JPG output","Fast API with CORS support","Clean, minimal design without watermarks"]},{"l":"Installation & Usage"},{"l":"1. Build the Docker image:"},{"l":"2. Run the container:"},{"l":"3. Generate code image:"},{"l":"Example","p":["Returns a JPG image of your formatted code."]},{"l":"API Endpoints","p":["Endpoint","Method","Description","/generate-image","GET","Generate code image from query parameter"]},{"l":"Configuration","p":["The service uses these Carbon.now.sh settings:","Theme: Seti","Font: Hack (12px)","Format: JPG (90% quality)","Size: 512x512 pixels","No line numbers, window controls, or watermarks"]},{"l":"Live Demo","p":["Try it now: https://zeroxcarbon.onrender.com/docs","Interactive API documentation with live testing capabilities."]},{"l":"Deployment","p":["Ready for deployment on any Docker-compatible platform including:","AWS (Elastic Container Service)","Google Cloud (Cloud Run)","Azure (Container Instances)","Render (Container Service)"]}],[{"i":"#","p":["Complete AI-powered automation system that generates programming memes and posts them to Instagram automatically using n8n workflows and Carbon API."]},{"l":"Automated Meme Generation System","p":["n8n AI Instagram FastAPI","Github: 0xarchit/carbon-now-sh-api","Github: 0xarchit/n8n-templates","A complete AI-powered automation system that generates programming memes and posts them to Instagram automatically using n8n workflows and a custom Carbon.now.sh API."]},{"l":"Architecture"},{"l":"Components"},{"l":"1. AI Agent (n8n Workflow)","p":["Purpose: Automated meme generation and Instagram posting","Stack: n8n + Mistral LLM + Memory + Scheduling","Features:","Scheduled meme generation (customizable intervals)","Sarcastic programming humor using Mistral AI","Persistent memory to avoid repetition","Automated Instagram posting via FB Graph API","Cloudinary integration for image hosting"]},{"l":"2. Carbon API (FastAPI Service)","p":["Purpose: Convert code snippets to beautiful images","Stack: FastAPI + Playwright + Carbon.now.sh","Features:\\","Pre-configured Seti theme with Hack font","No watermarks or distractions","Docker containerized","CORS enabled"]},{"l":"Quick Start"},{"l":"Carbon API"},{"l":"AI Agent Setup","p":["Import ai-agent/instagram_autopost.json into your n8n instance","Configure credentials:","Mistral Cloud API","Facebook Graph API (Instagram)","Cloudinary (optional)","Update URLs to point to your Carbon API deployment","Set schedule trigger as needed"]},{"l":"Live Demo","p":["Carbon API: https://zeroxcarbon.onrender.com/docs","Instagram: https://www.instagram.com/echosarcasm"]},{"l":"Prerequisites","p":["Docker or Python 3.11+","Playwright (auto-installed)","n8n instance (self-hosted or cloud)","Mistral Cloud account","Facebook Developer account (Instagram Basic Display)","Cloudinary account (optional)"]},{"l":"Configuration"},{"l":"AI Agent Workflow","p":["Schedule Trigger: Set your posting frequency","Mistral LLM: Configure API credentials","Carbon API URL: Point to your deployed Carbon service","Instagram: Configure FB Graph API credentials","Memory: Maintains context to avoid duplicate memes"]},{"i":"carbon-api-1","l":"Carbon API","p":["Theme: Seti (dark)","Font: Hack 12px","Output: JPG at 90% quality","No line numbers or window controls"]},{"l":"Workflow Process","p":["Schedule Trigger→ Starts the automation","AI Agent→ Generates witty programming meme","Memory Check→ Ensures uniqueness","Caption Generator→ Creates Instagram-ready text","Carbon API→ Converts code to beautiful image","Cloudinary→ Uploads image (optional)","Instagram→ Auto-posts to your account"]},{"l":"Customization","p":["Meme Style: Edit prompts in AI Agent nodes","Visual Theme: Modify Carbon API parameters","Posting Schedule: Adjust Schedule Trigger intervals","Platforms: Extend to Twitter, LinkedIn, etc."]},{"l":"License","p":["Open source - feel free to fork and customize for your own automated meme empire!"]}],[{"i":"#","p":["Web-based teaching assistant with real-time emotion detection, voice-to-text, AI processing, and text-to-voice capabilities."]},{"l":"AI Teaching Assistant System","p":["GitHub: 0xarchit/Classroom_AI_Assistant","A multimodal AI assistant system integrating emotion detection, speech processing, and contextual AI responses."]},{"l":"Problem Statement","p":["Modern classrooms lack real-time, interactive tools to address diverse student needs and keep them engaged. The objective is to create a multimodal AI assistant that:","Accepts and processes text and voice queries from students in real-time.","Provides contextual responses, including textual explanations, charts, and visual aids.","Detects disengagement or confusion using facial expression analysis."]},{"l":"Features","p":["Emotion Detection: Detects user's facial emotions in real-time using DeepFace and OpenCV","Voice-to-Text: Converts user's speech to text for natural language input","AI Processing: Processes user queries with emotion-aware AI responses","Image Search: Finds relevant images based on contextual prompts","Text-to-Voice: Converts AI responses to speech with emotion-appropriate voice synthesis","Web Interface: Modern UI built with HTML, TailwindCSS, and JavaScript"]},{"l":"System Architecture"},{"l":"Backend","p":["FastAPI server with asynchronous WebSocket implementation","Connection management system handling multiple concurrent users","Integration of multiple AI components","Efficient state tracking of user emotions, interactions, and responses","Asynchronous processing for better performance"]},{"l":"Frontend","p":["Responsive design with TailwindCSS","Real-time WebSocket communication for seamless interactions","Camera integration for emotion detection","Dynamic UI updates based on emotion detection","Speech recognition using Web Speech API"]},{"l":"System Flow Diagram"},{"l":"Demo"},{"l":"Screenshots","p":["AI Teaching Assistant Interface Screenshot: Main interface showing the emotion-aware Classroom AI assistant with real-time camera feed and chat interface"]},{"l":"Usage","p":["Click the \"Start Assistant\" button to begin","Allow camera and microphone permissions when prompted","Speak clearly to interact with the assistant","The system will:","Detect your emotion","Convert your speech to text","Process your query with AI","Display relevant images","Speak the AI response"]},{"l":"Components","p":["main.py: FastAPI backend server","emotion_processor.py: Handles facial emotion detection","voice_processor.py: Manages speech-to-text conversion","img_and_ai.py: Handles image search and AI processing","TextToVoice.py: Manages text-to-speech conversion","index.html: Main frontend interface","styles.css: Custom styling","app.js: Frontend JavaScript logic"]},{"l":"Project Structure"},{"l":"AI Core & Technical Details"},{"l":"AI Model","p":["LLaMA 3.1 3B (8-bit) fine-tuned on 9,000+ emotion-labeled Q&A pairs","Custom emotion-aware prompt engineering with context preservation","Dedicated processing pipeline for each detected emotional state","Local model deployment with optimized inference for responsive interactions"]},{"l":"Emotion Detection","p":["DeepFace & OpenCV with real-time webcam processing","Base64 image encoding for efficient WebSocket transmission","Continuous emotional state tracking with state management"]},{"l":"Voice Interaction","p":["Speech-to-Text for natural language input","Edge Text-to-Speech with emotion-appropriate voice synthesis","Unique audio file generation with UUID-based identification"]},{"l":"Image Search","p":["Contextual image sourcing driven by prompt","Dynamic content generation that adapts to both query and detected emotion","Integrated image processing with AI-generated responses"]},{"l":"Implementation Details","p":["This isn't just an API wrapper—it's a complete system with:","Custom WebSocket architecture handling real-time bidirectional communication","End-to-end emotion processing pipeline from detection to response generation","Local model deployment with optimized inference for responsive interactions","Comprehensive error handling and logging system","No external LLM APIs were used due to project restrictions—everything runs locally"]},{"l":"Emotional Intelligence Architecture","p":["Real-time emotion detection feeding continuously into the AI decision matrix","Calibrated to different emotional states","Stateful conversation tracking that maintains emotional context","Adaptive voice characteristics matching the detected emotional state","Connection Manager tracking user state across multiple sessions"]},{"l":"Resources"},{"l":"Dataset and Model","p":["Dataset: Ques-Ans-with-Emotion- 9,000+ emotion-labeled Q&A pairs","Model: AI Teaching Assistant- Fine-tuned LLaMA 3.1 3B"]},{"l":"Setup Instructions"},{"l":"Prerequisites","p":["Python 3.8 or higher","Webcam for emotion detection","Microphone for voice input","Internet connection for image search"]},{"l":"Installation","p":["Clone the repository or navigate to the project directory","Install dependencies:","Set up environment variables:","Rename .env.example to .env(or create a new .env file)","Add your RapidAPI key for image search","Configure any other environment variables as needed","Example .env file:","Run the server:","Open your browser and navigate to:"]},{"l":"Troubleshooting","p":["If the camera doesn't work, check browser permissions","If speech recognition fails, ensure your microphone is working","If the server fails to start, check if port 8000 is available"]},{"l":"Future Goals","p":["As we continue to develop this AI Classroom Teaching Assistant System, we plan to implement several enhancements to make the experience even more immersive and effective:"]},{"l":"Near-Term Enhancements","p":["Emotion-Adaptive Voice Generation: Integration of a specialized ML model for human-like voice generation that dynamically adapts tone, pitch, and speaking style based on detected student emotions","AI Image Generation: Implementation of diffusion models to create custom educational illustrations and diagrams in real-time based on the educational content being discussed","Multi-Student Emotion Tracking: Ability to simultaneously track and respond to multiple students emotional states in classroom settings","Personalized Learning Paths: Development of student profiles that track engagement patterns and learning preferences to customize future interactions","Extended Language Support: Integration of multilingual capabilities for global classroom deployment"]},{"l":"Long-Term Vision","p":["AR/VR Integration: Creation of immersive educational experiences with 3D visualizations of complex concepts","Collaborative Learning Features: Facilitation of group activities and peer-to-peer learning with AI moderation","Advanced Analytics Dashboard: Comprehensive insights for educators about student engagement, emotional patterns, and learning progress"]},{"l":"License","p":["This project is part of the Intel Unnati program, completed by team Bitbots."]}],[{"i":"#","p":["A collection of web scrapers: a Python-based DuckDuckGo Lite scraper and a Cloudflare Worker Jina AI & Groq LLM scraper."]},{"l":"Web Scraper Collection","p":["GitHub: 0xarchit/duckduckgo-webscraper Live Demo: https://duckduckgo-webscraper.onrender.com Live Demo: https://webscrape.0xcloud.workers.dev/?key=test&query="]},{"i":"web-scraper-collection-1","l":"Web Scraper Collection","p":["A collection of web scraper/content scrapers with two major approaches:","Python-based DuckDuckGo Scraper: Uses DuckDuckGo Lite search to fetch top result pages (default 3, customizable), then extracts structured content (titles, descriptions, headings, summaries, links, and more).","Cloudflare Worker Scraper: Fetches search results via Jina AI and DuckDuckGo, retrieves page content, analyzes it with Groq LLM API, and rotates through multiple API keys using GetPantry."]},{"l":"Python-based DuckDuckGo Scraper"},{"l":"Features","p":["Uses DuckDuckGo Lite search for query results","Rotates through a free proxy list sourced from GitHub","Extracts page title, meta description, main heading, first paragraphs, links, emails, authors, dates, and JSON-LD data","Skips ad redirects and handles failures gracefully"]},{"l":"Requirements","p":["Python 3.7+","requests","beautifulsoup4","lxml"]},{"l":"Installation"},{"l":"Usage","p":["Prompts for a search query","Default max_results is 3 (adjust in webscraper.py)"]},{"l":"Configuration","p":["Proxy URL in fetch_proxies() of webscraper.py","Change max_results to adjust page count per query","Tweak time.sleep() delays for rate limiting"]},{"l":"Sample Output"},{"l":"Click to expand"},{"l":"Cloudflare Worker Jina AI & Groq Scraper"},{"i":"features-1","l":"Features","p":["Leverages Jina AI and DuckDuckGo for search","Analyzes content with Groq LLM API","Rotates multiple API keys via GetPantry","Deploys serverless on Cloudflare Workers"]},{"l":"Setup","p":["Open the Cloudflare Worker: Jina AI Groq Scraper folder","Edit worker.js: replace JINA_API_KEYS, GROQ_API_KEYS, PANTRY_ID, and BASKET_NAME","Initialize Pantry basket with:","Deploy the script to Cloudflare Workers"]},{"l":"Invoke Endpoint"},{"l":"Live Demo","p":["test key gives daily 15 queries"]}],[{"i":"#","p":["Serverless GitHub profile analytics with Cloudflare Workers UI, APIs, SVG heatmap, badges, and optional AI analysis."]},{"l":"GitHub Profile Analyzer","p":["GitHub: 0xarchit/github-profile-analyzer Live Demo: https://git.0xcloud.workers.dev","AI Powered Github Profile analyzer and reviewer tool. Gives review based on first 100 repos and only includes those forks in which user has contributions to avoid fake results","Serverless GitHub profile analytics you can deploy in minutes. This project ships:","A single, production-ready Cloudflare Worker ( worker.js) that powers the UI and APIs","Two demo Workers for standalone usage: contri-graph.js(SVG contribution heatmap) and badge.js(achievement badges)","This README documents every API, parameters, responses, configuration, and how the system works end-to-end."]},{"l":"Contents","p":["Overview and architecture","Important Highlight","Configuration (tokens, origins, env)","API reference: worker.js (all-in-one)","API reference: contri-graph.js (demo)","API reference: badge.js (demo)","Caching, rate limits, and security","Examples and embeds","Deploy with Cloudflare Workers","Troubleshooting"]},{"l":"Overview and architecture","p":["worker.js handles:","GET /— serves a built-in Tailwind UI that calls the APIs","GET /rate_limit— aggregates GitHub REST API rate limits across multiple tokens","GET /contributions?username=user— returns an SVG heatmap of public contributions","GET /api?username=user— returns a unified JSON: profile, repos, authored forks, badges, and an AI analysis","Additionally, the UI embeds third‑party stat images (readme-stats, streaks, trophies) and provides print/save features. The Worker enforces CORS for sensitive endpoints and uses both CDN and browser caching to reduce API load.","Demo Workers:","contri-graph.js: minimal, tokenized SVG generator for contribution heatmaps","badge.js: minimal badge resolver that returns unlocked GitHub achievements and their image URLs"]},{"l":"Important Highlights","p":["Local Storage Caching: All API responses are cached in the browser's local storage for 1 hour, minimizing redundant requests and improving performance for repeat visits.","Repository Limit: Only the first 100 repositories (sorted by GitHub's default order) are processed for contribution and badge analysis, ensuring fast response times.","Fork Filtering: For forked repositories, only those in which the user has made at least one commit are included in the analysis. This ensures the stats and graphs reflect the user's actual contributions, not just forks with no activity.","Permanent Page URLs: Each analyzed profile can be accessed via a unique, shareable URL, allowing you to revisit or share the analysis page at any time.","Download & Print to PDF: The analysis page can be downloaded or saved as a PDF (using your browser's \"Print to PDF\" feature) for offline viewing or sharing."]},{"l":"Configuration","p":["Open worker.js and customize:","const githubTokens = [api_keys];","Array of one or more GitHub personal access tokens (classic or fine‑grained) with public repo read permissions.","Used for REST and GraphQL calls; one is randomly chosen per request.","const cerebrasKeys = [api_keys];","Array of Cerebras API keys, used to call https://api.cerebras.ai/v1/chat/completions for the AI section.","If unavailable, the /api route will fail at the AI step. Provide a key or adjust the code to disable AI.","const FRONTEND_ORIGIN = 'deployemnt_link';","Only requests where the Origin/Referer starts with this string are allowed for /api and /contributions.","Example: https://git.yourdomain.workers.dev or https://your-frontend.example.com.","Other noteworthy constants and behavior:","Badge slugs checked: pull-shark, starstruck, pair-extraordinaire, galaxy-brain, yolo, quickdraw, highlight, community, deep-diver, arctic-code-vault-contributor, public-sponsor, heart-on-your-sleeve, open-sourcerer","Achievements are validated via a cheap HEAD probe to https://github.com/user?tab=achievementsachievement=slug","Star gating: /api checks if the user has starred 0xarchit/github-profile-analyzer and returns 403 otherwise. You can change this repo string inside worker.js if needed."]},{"l":"API reference: worker.js (all-in-one)","p":["Protected routes (/api, /contributions) enforce strict CORS using FRONTEND_ORIGIN. Ensure your site origin matches to avoid 403 errors.","Base URL: your Cloudflare Worker URL (for development examples we’ll use https://your-worker.workers.dev).","Security and CORS:","/api and /contributions require the request Origin or Referer to start with FRONTEND_ORIGIN.","/rate_limit and / do not enforce this CORS check.","Common errors:","403 Cross-origin requests are not allowed — Origin/Referer mismatch for protected routes","403 You have not starred the repository — star-gating rule in /api","429 GitHub API rate limit exceeded — aggregate remaining is 0 across selected token","500 Worker error — unexpected runtime error"]},{"l":"GET /","p":["Serves the built-in UI. Supports ?username=user to pre-fill and auto-run."]},{"l":"GET /rate_limit","p":["Aggregates GitHub rate-limit across all tokens defined in githubTokens.","Response 200 application/json:","Notes:","Calls https://api.github.com/rate_limit once per token and sums fields from data.rate."]},{"l":"GET /contributions?username=user","p":["Returns an SVG heatmap representing the user’s public contributions. Internally uses GitHub GraphQL API.","Parameters:","username(required): GitHub login","Behavior:","Queries contributionsCollection.contributionCalendar.weeks[].contributionDays[]","Computes a max intensity, renders a 7×N grid (weeks×days)","Colors: #2f3727 for zero; rgba(0,255,0, alpha) for >0 with alpha scaled by intensity","CDN caching: Cache-Control: public, max-age=3600 and saved in caches.default by URL","Responses:","200 image/svg+xml — SVG content","400 application/json — { error: Username parameter is required }","403 application/json — CORS blocked ( FRONTEND_ORIGIN mismatch)","4xx/5xx application/json — GitHub API errors forwarded with message","Embed example (HTML):"]},{"l":"GET /api?username=user","p":["400 { error: Username parameter is required }","403 { error: Cross-origin requests are not allowed }","403 { error: You have not starred the 0xarchit/github-profile-analyzer repository, showPopup: true }","429 { error: GitHub API rate limit exceeded }","4xx/5xx { error: Failed to fetch ... }","AI via Cerebras chat completions with a JSON-only system prompt; model llama-4-scout-17b-16e-instruct","authored_forks: forks where the user has at least one commit (checked with GET /repos/user/repo/commits?per_page=100 and matching author.login === user)","Badges via achievement HEAD checks for known slugs","Collection logic:","Commit check for authored forks examines up to 100 latest commits per repo; earlier commits may be missed","CORS: Origin/Referer must start with FRONTEND_ORIGIN","Error responses:","If Cerebras call fails, the route returns an error; you may opt to try/catch and continue without AI","Notes and limitations:","Only first 100 repos considered","Only public data is analyzed; private repos and private contributions are invisible","original_repos: non-forks","Parameters:","Profile via GET /users/user","Rate limit: queries https://api.github.com/rate_limit; if remaining is 0 returns 429","Repositories via GET /users/user/repos?per_page=100page=1","Request pre-checks:","Response 200 application/json (shape):","Returns a unified JSON combining public profile, repositories, authored forks, unlocked badges, and an AI analysis.","Star gating: fetches GET /users/user/starred?per_page=1000page=1 and checks presence of 0xarchit/github-profile-analyzer. If missing, returns 403 with { showPopup: true } to instruct the UI to show a “Star this repo” prompt","Two buckets are returned:","username(required)"]},{"l":"API reference: contri-graph.js (demo)","p":["This is a minimal Worker that returns an SVG heatmap. It expects you to set a single GitHub token inside the file.","Route: GET /?username=user","Parameters:","username(required)","Behavior and differences vs worker.js:","No CORS check","Requires const token = YOUR_GITHUB_TOKEN to be set","Returns SVG with the same visual logic (7×N grid, intensity scaling)","Responses:","200 image/svg+xml — heatmap","400 { error: Username is required }","500 { error: GitHub token not configured } or forwarded API errors"]},{"l":"API reference: badge.js (demo)","p":["This is a minimal Worker that resolves GitHub achievement badges for a user.","Route: GET /?username=user","Parameters:","username(required)","Behavior:","Issues HEAD probes to each known achievement URL","If 200, includes the badge slug and its official image URL in the response","Response 200 application/json:","Errors:","500 { error: No username provided } or network errors"]},{"l":"Caching, rate limits, and security","p":["Cloudflare cache: /contributions responses cached for 1 hour ( Cache-Control: public, max-age=3600) keyed by URL","Browser cache: the UI stores /api responses in localStorage for 1 hour per username key","Token rotation: each server call picks a random token from githubTokens","CORS: /api and /contributions enforce FRONTEND_ORIGIN via Origin/Referer check"]},{"l":"Examples and embeds","p":["PowerShell (Windows) examples:","HTML embed for heatmap:"]},{"l":"Deploy with Cloudflare Workers","p":["Add your tokens in worker.js:","githubTokens: at least one GitHub token","cerebrasKeys: one Cerebras key (or adjust code to skip AI)","FRONTEND_ORIGIN: your site origin that’s permitted to call the protected endpoints","Deploy","Via dashboard: create a Worker, paste worker.js, deploy","Via Wrangler: create a project and set main to worker.js, then wrangler deploy","Cloudflare Dashboard Wrangler CLI Guide"]},{"l":"Troubleshooting","p":["403 Cross-origin requests are not allowed","Ensure your request Origin/Referer starts with FRONTEND_ORIGIN","403 You have not starred the repository","Star https://github.com/0xarchit/github-profile-analyzer","Or edit the repository name string inside worker.js","429 GitHub API rate limit exceeded","Add more tokens to githubTokens or wait for reset","Blank/low data","Private repos and private contributions aren’t visible; only public data is analyzed","Authored-forks detection checks only the last 100 commits per repo"]}],[{"i":"#","p":["Modular, production-style news dashboard using React, Cloudflare Workers (D1), FastAPI, and Node.js (Puppeteer) with summaries and bookmarks."]},{"l":"ArcNews","p":["GitHub stars License Repo Size Forks Top Language Website Status","GitHub: https://github.com/0xarchit/ArcNews-DashBoard/ Live Demo: https://arcnews.0xarchit.is-a.dev Backend & Frontend Status: https://arcnewsapi.0xarchit.is-a.dev"]},{"l":"⭐ Support This Project","p":["If you find ArcNews useful for learning, prototyping, or as a reference, please consider starring the repository. Your support is greatly appreciated and helps the project's visibility."]},{"l":"Overview","p":["ArcNews is a comprehensive, production-style news dashboard designed with a modular, full-stack architecture. It demonstrates the integration of multiple modern technologies to deliver a feature-rich user experience. The system is composed of four distinct, independently deployable services that work in concert:","Frontend: A responsive and interactive user interface built with Vite, React, and TypeScript. It handles user authentication, preferences, and the presentation of news articles.","WorkerDBApi: The core backend service, built on Cloudflare Workers and the D1 database. It serves as the primary data source for the frontend, manages data ingestion, and orchestrates calls to other backend services. It refreshes after every 1 hour with the help of cronjobs.","NewsAPI: A data-sourcing service written in Python with FastAPI. It is responsible for fetching and parsing news articles from various external RSS feeds and websites, normalizing the data for ingestion.","ContentExtract: A specialized microservice using Node.js and Puppeteer. Its purpose is to extract the full, clean content from article URLs and generate concise summaries using an LLM.","The WorkerDBApi uses Cloudflare Cron to refresh the D1 data roughly every hour. Ensure service URLs and D1 bindings are configured before deploying.","This document provides a deep dive into the project's architecture, the inner workings of each service, complete API documentation, and guides for local development and deployment."]},{"l":"Preview","p":["Landing Dashboard Summary Profile"]},{"l":"System Architecture","p":["The architecture is designed for scalability and separation of concerns. The frontend is completely decoupled from the data sourcing and processing logic, communicating only with the core API worker and Supabase for user-specific data."]},{"l":"High-Level Diagram","p":["This diagram illustrates the primary components and their interactions.","Key Principles:","Decoupled Frontend: The Frontend only communicates with WorkerDBApi for news data and Supabase for authentication and bookmarks. It has no knowledge of the other backend services.","Orchestration Layer: WorkerDBApi acts as the central orchestrator. It handles all server-to-server communication, shielding the frontend from the complexity of data ingestion and processing.","Scalable Microservices: NewsAPI and ContentExtract are independent services that can be scaled or replaced without impacting the rest of the system."]},{"l":"Data Flow: Article Ingestion (Scheduled)","p":["This sequence shows how new articles are periodically fetched and stored."]},{"l":"Data Flow: Summary Enrichment (On-Demand)","p":["This sequence shows how an article's full content and summary are fetched the first time a user requests them."]},{"l":"Services In Depth"},{"l":"Frontend","p":["Article Modal: Displays the full, cleaned article content and AI-generated summary.","Authentication & Bookmarks: @supabase/supabase-js","Category-based news data is cached in localStorage for 1 hour to reduce API calls.","Core Logic & Hooks:","Data Fetching: TanStack Query for server state, axios","Directory: Frontend/","Dynamic Dashboard:","Environment Variables (Frontend/.env):","Filter news by category (Tabs).","Filter news by date range (Date Picker).","Framework: React 18 with Vite (SWC)","Full-text search across all articles.","hooks/useBookmarks.ts: A critical hook that manages bookmark state. It features a shared in-memory store with a 60-second TTL, in-flight promise de-duplication to prevent redundant fetches, and listeners to sync state across all components using the hook.","Icons: lucide-react","Infinite Scroll: Smoothly loads more articles as the user scrolls.","Key Features:","Language: TypeScript","Multiple Views: Switch between responsive Grid and List layouts.","Optimistic UI Updates: Bookmarking and liking articles provide immediate feedback while the request is in flight.","Personalized Bookmarks: Users can save and manage their favorite articles, stored in a dedicated Supabase table.","Robust Caching:","Routing: react-router-dom","Sort by date or popularity (likes).","Supabase Schema (public.bookmarks):","Tech Stack:","The cache implementation is resilient, automatically handling QuotaExceededError by evicting the oldest or largest entries to make space.","The frontend is a modern, single-page application providing a seamless and dynamic user experience.","Theme Persistence: Light, dark, and system theme support, saved to localStorage.","UI: TailwindCSS with ShadCN UI components","User Authentication: Secure sign-up, sign-in, and session management via Supabase Auth.","utils/api.ts: Centralized API client for interacting with the WorkerDBApi. It uses the VITE_API_BASE_URL and includes a fetchWithTimeout utility.","utils/cache.ts: Implements the robust localStorage caching logic with TTL and intelligent eviction."]},{"l":"WorkerDBApi","p":["'add extract url': The full URL for your ContentExtract service's /extract-content endpoint.","A separate table is created for each news category (e.g., technology, sports, etc.).","API Gateway: Exposes a public API for the frontend.","Business Logic: Manages like counts and user interactions with articles.","Configuration (wrangler.toml and worker.js):","Core Responsibilities:","D1 Database Schema:","Data Ingestion: On a cron schedule ( scheduled handler), it fetches new articles from NewsAPI.","Data Persistence: Stores and manages news articles in separate D1 tables for each category.","Directory: WorkerDBApi/","newsApiUrl: The base URL for your NewsAPI service. The worker appends the category to it (e.g., https://my-news-api.vercel.app/technology).","Placeholders in worker.js must be replaced with your deployed service URLs:","Service Orchestration: Calls ContentExtract on-demand to enrich articles with summaries.","Technology: Cloudflare Workers + D1 Database","This is the heart of the backend, handling data persistence, orchestration, and serving all content to the frontend.","You must bind a D1 database in wrangler.toml."]},{"l":"ewsAPI","p":["This service acts as the data provider, abstracting the complexity of fetching and parsing from various news sources.","Directory: NewsAPI/","Technology: Python 3.11+ with FastAPI","Core Logic:","For each category, it maintains a list of RSS feeds or websites.","It uses libraries like feedparser and regex to handle different data formats.","It normalizes the extracted data into a consistent NewsItem schema before returning it.","The provided index.py is a functional scaffold; the parsing logic within each function needs to be fully implemented and dependencies ( feedparser, etc.) installed.","CORS: Configured to only allow requests from the deployed WorkerDBApi origin for security."]},{"l":"ContentExtract","p":["A powerful microservice dedicated to turning a URL into clean, readable content and a summary.","Directory: ContentExtract/","Technology: Node.js with Express, puppeteer-extra(with stealth plugin), @mozilla/readability, and axios.","Core Logic:","Receives a POST request with a URL.","Launches a headless Chromium browser using Puppeteer. The stealth plugin helps bypass bot detection.","Intercepts network requests to block images, ads, and trackers for speed and cleanliness.","Navigates to the URL and extracts the raw HTML.","Uses Mozilla's Readability library to parse the HTML and extract the main article content, stripping away sidebars, headers, and other clutter.","If Readability fails, it falls back to common selectors ( main, article).","The cleaned text is sent to an LLM endpoint (e.g., OpenAI-compatible API) with a prompt to summarize it.","Returns the original URL, title, description, full cleaned content, and the generated summary."]},{"l":"Detailed API Reference"},{"l":"WorkerDBApi Endpoints","p":["/{category}","/*","/all","/lastupdate","/refresh","/summary","400 Bad Request: If category or id are missing or invalid.","404 Not Found: If no article with that ID exists in the category.","500 Internal Server Error: If the database or the ContentExtract service fails.","Base URL: https://example.workers.dev(or your deployment)","Common Headers: Content-Type: application/json, Access-Control-Allow-Origin: *","Description","Errors:","Fetches a single article's details, enriching it with a summary if not already present.","Fetches all articles for a specific category, sorted by publish date.","Fetches articles from all categories combined, sorted by publish date (limit 10,000).","GET","GET /{category}","Handles CORS preflight requests.","Manually triggers the data ingestion process. Intended for admin use or cron jobs.","Method","OPTIONS","Path","Path Parameter: category must be one of business, entertainment, health, science, sports, technology.","Returns the timestamp of the last successful data ingestion.","Success (200):","This is the public API consumed by the Frontend."]},{"l":"ContentExtract Endpoints","p":["Server-to-server API consumed by WorkerDBApi.","Base URL: http://localhost:3000(or your deployment)","POST /extract-content","Request Body:","Errors:","400 Bad Request: If url is missing or invalid.","500 Internal Server Error: If Puppeteer or the LLM call fails."]},{"l":"NewsAPI Endpoints","p":["Server-to-server API consumed by WorkerDBApi.","Base URL: Your deployment (e.g., on Vercel)","GET /{category}","Path Parameter: category(e.g., technology, sports).","Success (200): Returns a raw JSON array of normalized article objects."]},{"l":"Local Development"},{"l":"Prerequisites","p":["Node.js (v18 or newer)","pnpm(for Frontend)","Python (v3.11 or newer)","Cloudflare Wrangler CLI"]},{"l":"Setup Instructions","p":["Clone the repository:","Frontend:","ContentExtract:","NewsAPI:","WorkerDBApi:"]},{"l":"Deployment","p":["Frontend: Deploy to a static host like Vercel or Netlify. Set the environment variables in the project settings.","WorkerDBApi: Deploy to Cloudflare Workers. Create a D1 database and bind it. Set the URLs for the deployed NewsAPI and ContentExtract services as secrets.","For Cloudflare Workers, ensure wrangler.toml has your account_id, the D1 binding, and environment vars for service URLs.","Cloudflare Docs Wrangler CLI","NewsAPI: Deploy to a serverless function provider like Vercel or Heroku.","ContentExtract: Deploy to a service that supports long-running Node.js processes and can run headless Chrome, such as Fly.io or Render."]},{"l":"Future Goals","p":["Google One‑Tap / Social Sign‑In: add Google One‑Tap and additional OAuth providers (Apple, Twitter) for frictionless, secure sign-in and streamlined account linking.","Enhanced performance & UX: implement server-side caching, CDN edge caching, D1 query optimizations, image lazy‑loading and HTTP/2 to reduce TTFB and improve perceived load times.","Broader source coverage: expand NewsAPI feed lists to include more mainstream outlets, niche blogs, podcasts, and paid/partner APIs with adaptive scraping strategies and source weighting.","Richer summarization pipeline: support configurable LLM backends, hybrid extractive+abstractive summaries, length presets, and cached summary versions to reduce costs and latency.","Personalization & recommendations: per‑user topic preferences, collaborative filtering, session‑based ranking, and push personalization signals to deliver more relevant headlines.","Offline & sync support: add PWA capabilities, background sync, and local read‑later queues so users can read saved articles offline.","Real‑time updates & notifications: web push and in‑app notifications for breaking news, followed topics, and bookmark/like activity.","Multi‑language & localization: automatic language detection, on‑the‑fly translation, localized UI strings, and right‑to‑left support where required.","Accessibility & SEO improvements: audit and remediate WCAG issues, improve semantic markup, and enhance metadata for social previews and indexing.","Fact‑checking & content quality signals: integrate source reliability scores, third‑party fact‑check APIs, and community reporting flows to surface trustworthy content.","AI Chatbot Integration: Implement an AI-powered chatbot to enable users to discuss news topics, ask questions, and verify the credibility of articles using integrated fact-checking APIs and source reliability data.","Monetization & community: non‑intrusive monetization (sponsorships, donations, premium features, non irritating ads placements), contribution guidelines, and curated editorial channels to build a community around the project."]},{"l":"Troubleshooting","p":["QuotaExceededError in Browser: This is handled automatically by the frontend's cache eviction logic. If it persists, the user's localStorage is completely full.","Bookmark Failures: Check the browser's developer console for errors from Supabase. Ensure the user is logged in and RLS policies are correct.","Missing Summaries: Verify that the WorkerDBApi can reach the ContentExtract service. Check the worker logs for any errors.","Data Not Refreshing: Ensure the WorkerDBApi cron job is enabled and that it can reach the NewsAPI service. Check the logs for both services."]}],[{"i":"#","p":["Two RAG projects: ChatDoc (FastAPI + React + Milvus + Mistral) and an AI/ML/GenAI Mentor Chatbot (Gradio + LangChain + ChromaDB + Gemini). Unified page with separate sections."]},{"l":"RAG Projects: ChatDoc + AI/ML/GenAI Mentor Chatbot","p":["GitHub: 0xarchit/ChatDoc GitHub: 0xarchit/DocumentChat-Simple-Rag-VectorDB-Project"]},{"l":"Page Contents","p":["ChatDoc","Overview","Preview","Architecture","Features","Tech Stack","Getting Started","API Reference","Future Goals","AI/ML/GenAI Mentor Chatbot","Running in Google Colab","Basic Working","Usage","Clearing Data"]},{"l":"ChatDoc","p":["GitHub Repo 0xarchit/DocumentChat-Simple-Rag-VectorDB-Project Live Demo: https://chatdoc.0xarchit.is-a.dev","License GitHub stars GitHub issues","A unified retrieval-augmented generation (RAG) document API and web interface, powered by FastAPI, React, Vite, Milvus, and MistralAI."]},{"l":"Overview","p":["ChatDoc is a web application enabling users to upload documents, extract and chunk text, store embeddings in Milvus, and query with state-of-the-art LLMs. It provides both a REST API and a web-based interface for seamless integration."]},{"l":"Preview","p":["Landing Page Dashboard"]},{"l":"Architecture"},{"l":"Features","p":["Upload PDF, TXT, CSV, XLSX, PPTX, DOCX files via API or web form","Automatic text extraction and chunking (500 tokens, 50 overlap)","Embedding with MistralAI Embeddings & storage in Milvus (Zilliz)","Retrieval and response generation via OpenAI-compatible LLM","Real-time, responsive React UI with upload, history, and settings","Per-request overrides for API keys, endpoints, and collections","Admin endpoints for deleting uploads or clearing the vector store"]},{"l":"Tech Stack","p":["Backend: FastAPI, Python, PyPDF2, python-pptx, python-docx, Pandas, Milvus","Frontend: React, Vite, TypeScript, Tailwind CSS","Embeddings: MistralAI","Vector Database: Milvus (Zilliz Cloud)","LLM: OpenAI-compatible ChatOpenAI via LangChain"]},{"l":"Getting Started"},{"l":"Prerequisites","p":["Node.js >= 16 and npm/yarn","Python >= 3.9","Docker (optional)","Milvus or Zilliz Cloud credentials","MistralAI & OpenAI API keys"]},{"l":"Backend Setup"},{"l":"Frontend Setup"},{"l":"Docker (Optional)"},{"l":"API Reference"},{"l":"1) POST /upload","p":["Description: Upload document and store embeddings.","Content-Type: multipart/form-data","Fields:","file(required)","mistral_api_key, zilliz_uri, zilliz_token, collection_name(optional)","Responses:","200: { upload_id: uuid }","400: errors (no file, extraction failure)","413: file too large"]},{"l":"2) POST /query","p":["Description: Retrieve and answer based on stored chunks.","Content-Type: application/json","Body:","Responses:","200: { answer: generated answer }","400: invalid body","500: generation error"]},{"l":"3) DELETE /delete/","p":["Description: Remove all vectors for a given upload.","Params: upload_id path, overrides as query params","Response: { status: deleted }"]},{"l":"4) GET /deleteall","p":["Description: Clear entire vector store.","Query: password(native admin) or per-request overrides","Response: { status: all_deleted }"]},{"l":"Future Goals","p":["Streaming responses from the model to improve perceived latency and UX.","Better OCR and robust file parsing for scanned PDFs and more file formats.","Pluggable support for multiple vector stores (Milvus, FAISS, Pinecone, etc.).","Increase upload and context limits (larger files, fewer artificial word/chunk restrictions).","Personalization with login/signup, per-user profiles, metadata, and tags.","Expand supported AI models/providers and allow per-request model selection."]},{"i":"ai-ml-genai-mentor-chatbot","l":"AI/ML/GenAI Mentor Chatbot","p":["GitHub: 0xarchit/DocumentChat-Simple-Rag-VectorDB-Project","This vibe coded project provides an AI/ML/GenAI Mentor Chatbot built with Gradio, LangChain, ChromaDB, and Google Gemini. You can run the notebook in Google Colab to interact with the chatbot."]},{"l":"Running in Google Colab","p":["Open the notebook:","Import the notebook into your Google Drive or GitHub repository.","Open Google Colab and select File > Open notebook.","Under the Google Drive, GitHub, or Upload tab, locate your notebook ( main.ipynb) and open it.","Install dependencies:","Colab will automatically install required packages when running the first cell.","Run all cells:","In Google Colab, select Runtime > Run all to execute every cell sequentially.","This will set up the environment, process documents, initialize the chatbot, and launch the Gradio interface.","Alternatively, you can use the public Colab link:","Open in Google Colab","Also add your Gemini API key in Colab Secrets before running."]},{"i":"preview-1","l":"Preview","p":["collab","working image 1","working image 2"]},{"l":"Basic Working","p":["This project combines several modern AI tools to create an interactive mentor chatbot:","Gradio UI: Provides a simple, user-friendly web interface for uploading documents and chatting with the AI mentor.","ChromaDB (Vector Database): Stores document chunks as vector embeddings, enabling fast and relevant retrieval of information based on your questions.","all-MiniLM-L6-v2 Embedding Model: Converts text from your documents and queries into numerical vectors, allowing semantic search and matching.","Google Gemini (Generative AI): Generates detailed, structured answers using both retrieved document context and its own AI/ML/GenAI knowledge.","How it works:","Upload your PDF, PPT, or TXT files using the Gradio interface.","The files are split into chunks and embedded using the all-MiniLM-L6-v2 model.","ChromaDB stores these embeddings for efficient retrieval.","When you ask a question, the system finds the most relevant document chunks and sends them, along with your question, to Gemini.","Gemini generates a comprehensive answer, referencing your materials and providing real-world examples."]},{"l":"Usage","p":["Upload your PDF, PPT, or TXT files using the notebook’s upload section.","After processing, ask questions about AI, ML, or GenAI topics.","The chatbot will provide structured, detailed responses with real-world examples based on provided material only."]},{"l":"Clearing Data","p":["To clear all uploaded documents and chat history, run the Clear All Data button in the interface."]}]]